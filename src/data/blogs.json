[
    {
        "id": 1,
        "name": "Blogify Base 0.2 Release!",
        "description": "The Blogify project is advancing quickly, redefining how developers interact with Git history by leveraging the power of artificial intelligence. Recent updates demonstrate a clear direction: make commit analysis faster, more intelligent, and even predictive. Below is a breakdown of the major new features and why they matter for developers, teams, and code reviewers alike.",
        "body": "<article> <h1>AI-Powered Git Analysis Enters a New Phase: What’s New in Blogify's Latest Update</h1> <p>The Blogify project is advancing quickly, redefining how developers interact with Git history by leveraging the power of artificial intelligence. Recent updates demonstrate a clear direction: make commit analysis faster, more intelligent, and even predictive. Below is a breakdown of the major new features and why they matter for developers, teams, and code reviewers alike.</p> <section> <h2>Key Innovations in the Latest Release</h2> <h3>1. Hybrid Git Scanner: Combining GitPython and Subprocess for Optimal Performance</h3> <p>Blogify now employs a hybrid approach to extract commit information, using both GitPython and raw subprocess commands.</p> <strong>What’s New:</strong> <ul> <li><strong>GitPython</strong> is used for accessing uncommitted changes, particularly useful when working with the <code>--current</code> flag.</li> <li><strong>Subprocess-based Git CLI commands</strong> are used to fetch historical logs and commit metadata, offering speed and consistency across different environments.</li> </ul> <p><strong>Why It Matters:</strong><br> This dual-system design enables the tool to operate effectively in diverse scenarios. Subprocess calls offer better cross-platform stability and speed, while GitPython provides access to the latest uncommitted changes—allowing for real-time insight into experimental work that hasn’t been pushed to the repository.</p> <h3>2. Context-Aware AI Prompts for Smarter Analysis</h3> <p>Static commit summaries are no longer sufficient. Blogify now generates dynamic AI prompts that combine:</p> <ul> <li>Recent commit messages</li> <li>File diffs and types of changes</li> <li>(Optionally) full file contents for current changes</li> </ul> <p><strong>Why It Matters:</strong><br> This makes it significantly easier to detect trends, such as the adoption of a new framework or recurring refactor patterns, without manually reviewing each change. Developers can focus on insights, not inspection.</p> <h3>3. Pre-Commit Analysis with the <code>--current</code> Flag</h3> <p>One of the most impactful additions is the ability to analyze uncommitted changes, including both staged and unstaged files.</p> <strong>How It Works:</strong> <ul> <li>GitPython detects current changes.</li> <li>File contents are read directly and incorporated into AI analysis.</li> </ul> <p><strong>Use Case:</strong><br> Ideal for developers iterating on new ideas, or for tech leads conducting early-stage reviews. It offers immediate feedback on whether the changes are aligned with established patterns or introduce novel technology.</p> <h3>4. Refactored CLI with Useful Flags</h3> <p>The Blogify script has been restructured into a fully-featured command-line tool using Python’s <code>argparse</code> module. New flags improve usability and make the tool more suitable for automation:</p> <table> <thead> <tr> <th>Flag</th> <th>Function</th> </tr> </thead> <tbody> <tr> <td><code>--free</code></td> <td>Outputs the AI prompt for use in a free-tier or offline setting</td> </tr> <tr> <td><code>--current</code></td> <td>Analyzes staged and unstaged local changes</td> </tr> <tr> <td><code>days</code></td> <td>Filters commits based on recency (e.g., last N days)</td> </tr> </tbody> </table> <p><strong>Why It Matters:</strong><br> This interface allows for seamless integration into developer workflows, CI/CD pipelines, or even automated monitoring tools.</p> </section> <section> <h2>Why This Update Is Important in 2025</h2> <p>The increasing integration of AI into everyday development tools reflects a larger trend: software development is no longer just about writing code—it's also about understanding the evolution of that code at scale.</p> <p>With Blogify, developers and teams can:</p> <ul> <li>Detect the early use of new technologies</li> <li>Summarize complex commit histories in seconds</li> <li>Review work-in-progress efforts with clarity</li> </ul> <p>In an era where developer velocity and clarity are paramount, tools like Blogify help bridge the gap between raw commit logs and strategic technical understanding.</p> </section> <section> <h2>How to Get Started</h2> <p>You can begin using Blogify on any Git-tracked project:</p> <pre><code>python git_scanner.py /your/project --free</code></pre> <p>To analyze local changes before they’re committed:</p> <pre><code>python git_scanner.py /your/project --current</code></pre> </section> <section> <h2>Final Thoughts</h2> <p>Blogify represents more than a simple Git log analyzer. It’s a forward-looking tool for developers seeking deeper, AI-driven insights into their codebases. As this space continues to evolve, Blogify is positioning itself as a foundational tool for code comprehension in the modern development stack.</p> <p>This is just the beginning. More capabilities are on the way.</p> </section> </article>"
    },
    {
        "id": 2,
        "name": "Blog 2",
        "description": "Description for Blog 2",
        "body": "<p>Description for Blog 1</p>"
    },
    {
        "id": 3,
        "name": "Blog 3",
        "description": "Description for Blog 3",
        "body":"<p>Description for Blog 3</p>"
    }
]