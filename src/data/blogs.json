[
    {
        "id": 1,
        "name": "Blogify Base 0.2 Release!",
        "description": "The Blogify project is advancing quickly, redefining how developers interact with Git history by leveraging the power of artificial intelligence. Recent updates demonstrate a clear direction: make commit analysis faster, more intelligent, and even predictive. Below is a breakdown of the major new features and why they matter for developers, teams, and code reviewers alike.",
        "body": "<article> <h1>AI-Powered Git Analysis Enters a New Phase: What’s New in Blogify's Latest Update</h1> <p>The Blogify project is advancing quickly, redefining how developers interact with Git history by leveraging the power of artificial intelligence. Recent updates demonstrate a clear direction: make commit analysis faster, more intelligent, and even predictive. Below is a breakdown of the major new features and why they matter for developers, teams, and code reviewers alike.</p> <section> <h2>Key Innovations in the Latest Release</h2> <h3>1. Hybrid Git Scanner: Combining GitPython and Subprocess for Optimal Performance</h3> <p>Blogify now employs a hybrid approach to extract commit information, using both GitPython and raw subprocess commands.</p> <strong>What’s New:</strong> <ul> <li><strong>GitPython</strong> is used for accessing uncommitted changes, particularly useful when working with the <code>--current</code> flag.</li> <li><strong>Subprocess-based Git CLI commands</strong> are used to fetch historical logs and commit metadata, offering speed and consistency across different environments.</li> </ul> <p><strong>Why It Matters:</strong><br> This dual-system design enables the tool to operate effectively in diverse scenarios. Subprocess calls offer better cross-platform stability and speed, while GitPython provides access to the latest uncommitted changes—allowing for real-time insight into experimental work that hasn’t been pushed to the repository.</p> <h3>2. Context-Aware AI Prompts for Smarter Analysis</h3> <p>Static commit summaries are no longer sufficient. Blogify now generates dynamic AI prompts that combine:</p> <ul> <li>Recent commit messages</li> <li>File diffs and types of changes</li> <li>(Optionally) full file contents for current changes</li> </ul> <p><strong>Why It Matters:</strong><br> This makes it significantly easier to detect trends, such as the adoption of a new framework or recurring refactor patterns, without manually reviewing each change. Developers can focus on insights, not inspection.</p> <h3>3. Pre-Commit Analysis with the <code>--current</code> Flag</h3> <p>One of the most impactful additions is the ability to analyze uncommitted changes, including both staged and unstaged files.</p> <strong>How It Works:</strong> <ul> <li>GitPython detects current changes.</li> <li>File contents are read directly and incorporated into AI analysis.</li> </ul> <p><strong>Use Case:</strong><br> Ideal for developers iterating on new ideas, or for tech leads conducting early-stage reviews. It offers immediate feedback on whether the changes are aligned with established patterns or introduce novel technology.</p> <h3>4. Refactored CLI with Useful Flags</h3> <p>The Blogify script has been restructured into a fully-featured command-line tool using Python’s <code>argparse</code> module. New flags improve usability and make the tool more suitable for automation:</p> <table> <thead> <tr> <th>Flag</th> <th>Function</th> </tr> </thead> <tbody> <tr> <td><code>--free</code></td> <td>Outputs the AI prompt for use in a free-tier or offline setting</td> </tr> <tr> <td><code>--current</code></td> <td>Analyzes staged and unstaged local changes</td> </tr> <tr> <td><code>days</code></td> <td>Filters commits based on recency (e.g., last N days)</td> </tr> </tbody> </table> <p><strong>Why It Matters:</strong><br> This interface allows for seamless integration into developer workflows, CI/CD pipelines, or even automated monitoring tools.</p> </section> <section> <h2>Why This Update Is Important in 2025</h2> <p>The increasing integration of AI into everyday development tools reflects a larger trend: software development is no longer just about writing code—it's also about understanding the evolution of that code at scale.</p> <p>With Blogify, developers and teams can:</p> <ul> <li>Detect the early use of new technologies</li> <li>Summarize complex commit histories in seconds</li> <li>Review work-in-progress efforts with clarity</li> </ul> <p>In an era where developer velocity and clarity are paramount, tools like Blogify help bridge the gap between raw commit logs and strategic technical understanding.</p> </section> <section> <h2>How to Get Started</h2> <p>You can begin using Blogify on any Git-tracked project:</p> <pre><code>python git_scanner.py /your/project --free</code></pre> <p>To analyze local changes before they’re committed:</p> <pre><code>python git_scanner.py /your/project --current</code></pre> </section> <section> <h2>Final Thoughts</h2> <p>Blogify represents more than a simple Git log analyzer. It’s a forward-looking tool for developers seeking deeper, AI-driven insights into their codebases. As this space continues to evolve, Blogify is positioning itself as a foundational tool for code comprehension in the modern development stack.</p> <p>This is just the beginning. More capabilities are on the way.</p> </section> </article>",
        "date": "2025-05-25"
    },
    {
        "id": 2,
        "name": "Blog is Up and Running and Blogify changes",
        "description": "Dev Update: Blog Routing, Styling, and Local Blog Loading. This update adds blogs to the website and focuses on streamlining how blog content is served, styled, and linked. Several small changes enable better routing, deployment, and content management.",
        "body": "<h1>Dev Update: Blog Routing, Styling, and Local Blog Loading</h1>\n<p>This update adds blogs to the website and focuses on streamlining how blog content is served, styled, and linked. Several small changes enable better routing, deployment, and content management.</p>\n<hr>\n<h2>NavLink for Blog links</h2>\n<p>Replaced native anchor tags with React Router’s <code>NavLink</code> component. This prevents full page reloads and ensures client-side navigation works as expected:</p>\n<pre><code>import { NavLink } from 'react-router-dom';\n&lt;NavLink to={linkUrl}&gt;{title}&lt;/NavLink&gt;</code></pre>\n<p>This was a minor mistake I made and it made me think I couldn't host blogs in the static version of the website and led me down the rabbit hole of trying to host this website on Netlify. More on that later.</p>\n<hr>\n<h2>Local Blog Loading via JSON</h2>\n<p>Static blog data is now loaded from a local <code>blogs.json</code> file instead of hardcoding blog posts. This enables easier content updates without touching component code:</p>\n<pre><code>import blogs from '../../data/blogs.json';\nconst blog = blogs.find((blog) =&gt; blog.id === Number(id));</code></pre>\n<p>URL-based blog lookup was also added using <code>useSearchParams</code>, allowing dynamic rendering based on query params like <code>?id=1</code>.</p>\n<hr>\n<h2>Netlify-Compatible Redirects</h2>\n<p>Routing configuration was moved to Netlify-compatible redirects in <code>public/_redirects</code>, replacing <code>netlify.toml</code>. This ensures deep linking works in production:</p>\n<pre><code>/*    /index.html   200</code></pre>\n<p>Deploys to Netlify will now route all requests through the SPA entry point. This is one of many solutions I tried to host on Netlify.<br>Spent a couple hours on this, and eventually gave up and came back to realize that I could continue hosting on github sites. Will come back to Netlify deployment eventually.</p>\n<hr>\n<h2>Light/Dark Mode Friendly Styling</h2>\n<p>CSS variables were introduced for better theming. Elements like blog containers and code blocks now respond to color mode settings:</p>\n<pre><code>:root {\n  --lightmode-bg-primary: #ffffffec;\n  --darkmode-bg-primary: #604a4c;\n}\n.blogContainer {\n  background-color: hsla(0, 0%, 0%, 0.667);\n  color: var(--lightmode-bg-primary);\n}</code></pre>\n<p>This makes the blog section more readable and consistent across themes. Lightmode/Darkmode switch will be in next update.</p>\n<hr>\n<h2>Miscellaneous Fixes</h2>\n<ul>\n  <li>Blog descriptions are now truncated to 150 characters for cleaner listings.</li>\n  <li>Removed placeholder blog entries used for development.</li>\n  <li>Fixed height and padding issues across components.</li>\n</ul>\n<hr>\n<p>These changes bring the blog closer to production-ready quality with proper routing, theming, and dynamic content handling.</p>\n<h1>Dev Update: Improved Diff Parsing and Multi-Repo Scanning</h1>\n<p>This update focuses on refining how Blogify's Git scanner handles diffs, commit logs, and directory scanning.</p>\n<hr>\n<h2>Fixed Incorrect Diff Direction</h2>\n<p>The diff parsing logic had added (<code>+</code>) and removed (<code>-</code>) lines reversed. This was corrected so that:</p>\n<pre><code>if clean_line.startswith('-'):\n  # removed line\nelif clean_line.startswith('+'):\n  # added line</code></pre>\n<p>This fix ensures that added and removed lines are categorized correctly in scan results.</p>\n<hr>\n<h2>Optional String-Based Commit Logs</h2>\n<p>Added support for returning commit logs as formatted strings via a <code>stringCommitLog</code> parameter. This provides cleaner, readable output when needed:</p>\n<pre><code>if stringCommitLog:\n  commitStringInfo += f\"Date: {commit.committed_datetime}\\nMessage: {commit.message.strip()}\\n\"</code></pre>\n<p>When <code>stringCommitLog</code> is false, the tool continues to return raw data.</p>\n<hr>\n<h2>New <code>--delve</code> Flag for Recursive Scans</h2>\n<p>Introduced a <code>--delve</code> option that enables scanning for multiple Git repositories within a directory tree. This allows deeper analysis across monorepos or nested project structures.</p>\n<pre><code>if is_git_repo(root) and (delve or found_repos == 0):\n  # process repo</code></pre>\n<hr>\n<h2>Commit Limit Parameter</h2>\n<p>A new <code>commits</code> parameter lets users specify the number of commits to scan instead of relying on time-based filtering:</p>\n<pre><code>python git_scanner.py ./project 5 --delve</code></pre>\n<p>This makes the tool more flexible for targeted scans.</p>\n<hr>\n<p>These changes improve accuracy and usability in Git history scanning, especially in multi-repo environments.</p>",
        "date": "2025-05-27"
    }
]